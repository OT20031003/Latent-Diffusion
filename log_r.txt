Loading model from models/ldm/text2img-large/model.ckpt
autoencoder.py
LatentDiffusion: Running in eps-prediction mode
DiffusionWrapper has 872.30 M params.
ldm.modules/diffusionmodules/util.py ; make_schedule = linear
ldm/modules/diffusionmodules/model.py, Enocoder; in_channels = 3, ch_mult = [1, 2, 4, 4]
ldm/modules/diffusionmodules/model.py, Resnet in_channels != out_channels
ldm/modules/diffusionmodules/model.py, Resnet in_channels != out_channels
making attention of type 'vanilla' with 512 in_channels
ldm/models/autoencoder.py, AutoencoderKL init, created
Working with z of shape (1, 4, 32, 32) = 4096 dimensions.
making attention of type 'vanilla' with 512 in_channels
ldm/modules/diffusionmodules/model.py, Resnet in_channels != out_channels
ldm/modules/diffusionmodules/model.py, Resnet in_channels != out_channels
remove_png complete
img shape = torch.Size([10, 3, 256, 256])
10 images are saved in ./sentimg/
Encoder, forward@@@@@@@@@@@@@@@
autoencoder.py, h = torch.Size([10, 8, 32, 32])
autoencoder.py , moments = torch.Size([10, 8, 32, 32])
encode start = 
z = torch.Size([10, 4, 32, 32]), z_max = 6.474400520324707, z_min = -6.702722549438477
z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
images are saved in outputs/z.png
--------SNR = -10-----------
noise_variace = tensor([4.8890, 5.0147, 4.4990, 5.0640, 4.7569, 4.9433, 4.9255, 4.4128, 4.7170,
        5.0645], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.0291, 0.0291, 0.0291, 0.0291, 0.0291, 0.0291, 0.0291, 0.0291, 0.0291,
        0.0291], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([827, 827, 827, 827, 827, 827, 827, 827, 827, 827], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = -9-----------
noise_variace = tensor([3.8834, 3.9833, 3.5737, 4.0225, 3.7786, 3.9266, 3.9125, 3.5052, 3.7469,
        4.0229], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.0364, 0.0364, 0.0364, 0.0364, 0.0364, 0.0364, 0.0364, 0.0364, 0.0364,
        0.0364], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([802, 802, 802, 802, 802, 802, 802, 802, 802, 802], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = -8-----------
noise_variace = tensor([3.0847, 3.1641, 2.8387, 3.1952, 3.0014, 3.1190, 3.1078, 2.7843, 2.9762,
        3.1955], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.0454, 0.0454, 0.0454, 0.0454, 0.0454, 0.0454, 0.0454, 0.0454, 0.0454,
        0.0454], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([776, 776, 776, 776, 776, 776, 776, 776, 776, 776], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = -7-----------
noise_variace = tensor([2.4503, 2.5133, 2.2549, 2.5380, 2.3841, 2.4775, 2.4686, 2.2116, 2.3641,
        2.5383], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.0565, 0.0565, 0.0565, 0.0565, 0.0565, 0.0565, 0.0565, 0.0565, 0.0565,
        0.0565], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([750, 750, 750, 750, 750, 750, 750, 750, 750, 750], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = -6-----------
noise_variace = tensor([1.9463, 1.9964, 1.7911, 2.0160, 1.8938, 1.9680, 1.9609, 1.7568, 1.8779,
        2.0162], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.0701, 0.0701, 0.0701, 0.0701, 0.0701, 0.0701, 0.0701, 0.0701, 0.0701,
        0.0701], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([722, 722, 722, 722, 722, 722, 722, 722, 722, 722], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = -5-----------
noise_variace = tensor([1.5460, 1.5858, 1.4227, 1.6014, 1.5043, 1.5632, 1.5576, 1.3954, 1.4917,
        1.6016], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.0866, 0.0866, 0.0866, 0.0866, 0.0866, 0.0866, 0.0866, 0.0866, 0.0866,
        0.0866], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([694, 694, 694, 694, 694, 694, 694, 694, 694, 694], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = -4-----------
noise_variace = tensor([1.2281, 1.2596, 1.1301, 1.2720, 1.1949, 1.2417, 1.2372, 1.1084, 1.1849,
        1.2722], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.1067, 0.1067, 0.1067, 0.1067, 0.1067, 0.1067, 0.1067, 0.1067, 0.1067,
        0.1067], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([664, 664, 664, 664, 664, 664, 664, 664, 664, 664], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = -3-----------
noise_variace = tensor([0.9755, 1.0006, 0.8977, 1.0104, 0.9491, 0.9863, 0.9828, 0.8805, 0.9412,
        1.0105], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.1307, 0.1307, 0.1307, 0.1307, 0.1307, 0.1307, 0.1307, 0.1307, 0.1307,
        0.1307], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([634, 634, 634, 634, 634, 634, 634, 634, 634, 634], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = -2-----------
noise_variace = tensor([0.7748, 0.7948, 0.7130, 0.8026, 0.7539, 0.7835, 0.7806, 0.6994, 0.7476,
        0.8027], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.1592, 0.1592, 0.1592, 0.1592, 0.1592, 0.1592, 0.1592, 0.1592, 0.1592,
        0.1592], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([602, 602, 602, 602, 602, 602, 602, 602, 602, 602], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = -1-----------
noise_variace = tensor([0.6155, 0.6313, 0.5664, 0.6375, 0.5989, 0.6223, 0.6201, 0.5555, 0.5938,
        0.6376], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.1924, 0.1924, 0.1924, 0.1924, 0.1924, 0.1924, 0.1924, 0.1924, 0.1924,
        0.1924], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([570, 570, 570, 570, 570, 570, 570, 570, 570, 570], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 0-----------
noise_variace = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.2308, 0.2308, 0.2308, 0.2308, 0.2308, 0.2308, 0.2308, 0.2308, 0.2308,
        0.2308], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([536, 536, 536, 536, 536, 536, 536, 536, 536, 536], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 1-----------
noise_variace = tensor([0.3883, 0.3983, 0.3574, 0.4023, 0.3779, 0.3927, 0.3912, 0.3505, 0.3747,
        0.4023], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.2741, 0.2741, 0.2741, 0.2741, 0.2741, 0.2741, 0.2741, 0.2741, 0.2741,
        0.2741], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([502, 502, 502, 502, 502, 502, 502, 502, 502, 502], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 2-----------
noise_variace = tensor([0.3085, 0.3164, 0.2839, 0.3195, 0.3001, 0.3119, 0.3108, 0.2784, 0.2976,
        0.3196], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.3222, 0.3222, 0.3222, 0.3222, 0.3222, 0.3222, 0.3222, 0.3222, 0.3222,
        0.3222], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([467, 467, 467, 467, 467, 467, 467, 467, 467, 467], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 3-----------
noise_variace = tensor([0.2450, 0.2513, 0.2255, 0.2538, 0.2384, 0.2478, 0.2469, 0.2212, 0.2364,
        0.2538], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.3744, 0.3744, 0.3744, 0.3744, 0.3744, 0.3744, 0.3744, 0.3744, 0.3744,
        0.3744], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([432, 432, 432, 432, 432, 432, 432, 432, 432, 432], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 4-----------
noise_variace = tensor([0.1946, 0.1996, 0.1791, 0.2016, 0.1894, 0.1968, 0.1961, 0.1757, 0.1878,
        0.2016], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.4297, 0.4297, 0.4297, 0.4297, 0.4297, 0.4297, 0.4297, 0.4297, 0.4297,
        0.4297], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([397, 397, 397, 397, 397, 397, 397, 397, 397, 397], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 5-----------
noise_variace = tensor([0.1546, 0.1586, 0.1423, 0.1601, 0.1504, 0.1563, 0.1558, 0.1395, 0.1492,
        0.1602], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.4868, 0.4868, 0.4868, 0.4868, 0.4868, 0.4868, 0.4868, 0.4868, 0.4868,
        0.4868], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([362, 362, 362, 362, 362, 362, 362, 362, 362, 362], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 6-----------
noise_variace = tensor([0.1228, 0.1260, 0.1130, 0.1272, 0.1195, 0.1242, 0.1237, 0.1108, 0.1185,
        0.1272], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.5443, 0.5443, 0.5443, 0.5443, 0.5443, 0.5443, 0.5443, 0.5443, 0.5443,
        0.5443], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([328, 328, 328, 328, 328, 328, 328, 328, 328, 328], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 7-----------
noise_variace = tensor([0.0975, 0.1001, 0.0898, 0.1010, 0.0949, 0.0986, 0.0983, 0.0880, 0.0941,
        0.1011], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.6006, 0.6006, 0.6006, 0.6006, 0.6006, 0.6006, 0.6006, 0.6006, 0.6006,
        0.6006], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([295, 295, 295, 295, 295, 295, 295, 295, 295, 295], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 8-----------
noise_variace = tensor([0.0775, 0.0795, 0.0713, 0.0803, 0.0754, 0.0783, 0.0781, 0.0699, 0.0748,
        0.0803], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.6543, 0.6543, 0.6543, 0.6543, 0.6543, 0.6543, 0.6543, 0.6543, 0.6543,
        0.6543], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([262, 262, 262, 262, 262, 262, 262, 262, 262, 262], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 9-----------
noise_variace = tensor([0.0615, 0.0631, 0.0566, 0.0638, 0.0599, 0.0622, 0.0620, 0.0556, 0.0594,
        0.0638], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.7044, 0.7044, 0.7044, 0.7044, 0.7044, 0.7044, 0.7044, 0.7044, 0.7044,
        0.7044], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([232, 232, 232, 232, 232, 232, 232, 232, 232, 232], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 10-----------
noise_variace = tensor([0.0489, 0.0501, 0.0450, 0.0506, 0.0476, 0.0494, 0.0493, 0.0441, 0.0472,
        0.0506], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.7500, 0.7500, 0.7500, 0.7500, 0.7500, 0.7500, 0.7500, 0.7500, 0.7500,
        0.7500], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([203, 203, 203, 203, 203, 203, 203, 203, 203, 203], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 11-----------
noise_variace = tensor([0.0388, 0.0398, 0.0357, 0.0402, 0.0378, 0.0393, 0.0391, 0.0351, 0.0375,
        0.0402], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.7907, 0.7907, 0.7907, 0.7907, 0.7907, 0.7907, 0.7907, 0.7907, 0.7907,
        0.7907], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([176, 176, 176, 176, 176, 176, 176, 176, 176, 176], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 12-----------
noise_variace = tensor([0.0308, 0.0316, 0.0284, 0.0320, 0.0300, 0.0312, 0.0311, 0.0278, 0.0298,
        0.0320], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.8262, 0.8262, 0.8262, 0.8262, 0.8262, 0.8262, 0.8262, 0.8262, 0.8262,
        0.8262], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([152, 152, 152, 152, 152, 152, 152, 152, 152, 152], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 13-----------
noise_variace = tensor([0.0245, 0.0251, 0.0225, 0.0254, 0.0238, 0.0248, 0.0247, 0.0221, 0.0236,
        0.0254], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.8569, 0.8569, 0.8569, 0.8569, 0.8569, 0.8569, 0.8569, 0.8569, 0.8569,
        0.8569], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([129, 129, 129, 129, 129, 129, 129, 129, 129, 129], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 14-----------
noise_variace = tensor([0.0195, 0.0200, 0.0179, 0.0202, 0.0189, 0.0197, 0.0196, 0.0176, 0.0188,
        0.0202], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.8828, 0.8828, 0.8828, 0.8828, 0.8828, 0.8828, 0.8828, 0.8828, 0.8828,
        0.8828], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([110, 110, 110, 110, 110, 110, 110, 110, 110, 110], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 15-----------
noise_variace = tensor([0.0155, 0.0159, 0.0142, 0.0160, 0.0150, 0.0156, 0.0156, 0.0140, 0.0149,
        0.0160], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9046, 0.9046, 0.9046, 0.9046, 0.9046, 0.9046, 0.9046, 0.9046, 0.9046,
        0.9046], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([92, 92, 92, 92, 92, 92, 92, 92, 92, 92], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 16-----------
noise_variace = tensor([0.0123, 0.0126, 0.0113, 0.0127, 0.0119, 0.0124, 0.0124, 0.0111, 0.0118,
        0.0127], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9227, 0.9227, 0.9227, 0.9227, 0.9227, 0.9227, 0.9227, 0.9227, 0.9227,
        0.9227], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([77, 77, 77, 77, 77, 77, 77, 77, 77, 77], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 17-----------
noise_variace = tensor([0.0098, 0.0100, 0.0090, 0.0101, 0.0095, 0.0099, 0.0098, 0.0088, 0.0094,
        0.0101], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9376, 0.9376, 0.9376, 0.9376, 0.9376, 0.9376, 0.9376, 0.9376, 0.9376,
        0.9376], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([63, 63, 63, 63, 63, 63, 63, 63, 63, 63], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 18-----------
noise_variace = tensor([0.0077, 0.0079, 0.0071, 0.0080, 0.0075, 0.0078, 0.0078, 0.0070, 0.0075,
        0.0080], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9498, 0.9498, 0.9498, 0.9498, 0.9498, 0.9498, 0.9498, 0.9498, 0.9498,
        0.9498], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([52, 52, 52, 52, 52, 52, 52, 52, 52, 52], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
--------SNR = 19-----------
noise_variace = tensor([0.0062, 0.0063, 0.0057, 0.0064, 0.0060, 0.0062, 0.0062, 0.0056, 0.0059,
        0.0064], device='cuda:0'), z_variance = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9597, 0.9597, 0.9597, 0.9597, 0.9597, 0.9597, 0.9597, 0.9597, 0.9597,
        0.9597], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([43, 43, 43, 43, 43, 43, 43, 43, 43, 43], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=-0.7/
