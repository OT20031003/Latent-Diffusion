Loading model from models/ldm/text2img-large/model.ckpt
autoencoder.py
LatentDiffusion: Running in eps-prediction mode
DiffusionWrapper has 872.30 M params.
ldm/modules/diffusionmodules/model.py, Enocoder; in_channels = 3, ch_mult = [1, 2, 4, 4]
ldm/modules/diffusionmodules/model.py, Resnet in_channels != out_channels
ldm/modules/diffusionmodules/model.py, Resnet in_channels != out_channels
making attention of type 'vanilla' with 512 in_channels
ldm/models/autoencoder.py, AutoencoderKL init, created
Working with z of shape (1, 4, 32, 32) = 4096 dimensions.
making attention of type 'vanilla' with 512 in_channels
ldm/modules/diffusionmodules/model.py, Resnet in_channels != out_channels
ldm/modules/diffusionmodules/model.py, Resnet in_channels != out_channels
remove_png complete
img shape = torch.Size([20, 3, 256, 256])
20 images are saved in ./sentimg/
Encoder, forward@@@@@@@@@@@@@@@
autoencoder.py, h = torch.Size([20, 8, 32, 32])
autoencoder.py , moments = torch.Size([20, 8, 32, 32])
encode start = 
z = torch.Size([20, 4, 32, 32]), z_max = 6.4955878257751465, z_min = -5.73813533782959
images are saved in outputs/z.png
--------SNR = 0-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.8234, 0.7835, 0.8037, 0.7735, 0.8136, 0.8453, 0.7587, 0.8236, 0.8187,
        0.7346, 0.8803, 0.8193, 0.8444, 0.7900, 0.8091, 0.7979, 0.8763, 0.8599,
        0.8475, 0.7418], device='cuda:0')
ddim.py start_timesteps = tensor([15400, 18100, 16700, 18800, 16000, 13800, 19700, 15300, 15700, 21300,
        11200, 15600, 13900, 17700, 16400, 17100, 11500, 12700, 13600, 20800],
       device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 1-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.8808, 0.8515, 0.8664, 0.8440, 0.8737, 0.8965, 0.8329, 0.8809, 0.8774,
        0.8144, 0.9210, 0.8778, 0.8959, 0.8564, 0.8705, 0.8622, 0.9182, 0.9068,
        0.8980, 0.8199], device='cuda:0')
ddim.py start_timesteps = tensor([11100, 13300, 12200, 13900, 11700,  9900, 14700, 11100, 11400, 16000,
         7800, 11300,  9900, 13000, 11900, 12500,  8100,  9000,  9700, 15600],
       device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 2-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9213, 0.9009, 0.9114, 0.8956, 0.9164, 0.9321, 0.8876, 0.9214, 0.9190,
        0.8743, 0.9487, 0.9193, 0.9317, 0.9043, 0.9142, 0.9084, 0.9468, 0.9391,
        0.9331, 0.8783], device='cuda:0')
ddim.py start_timesteps = tensor([ 7800,  9500,  8600,  9900,  8200,  6800, 10600,  7800,  8000, 11600,
         5300,  8000,  6900,  9200,  8400,  8900,  5500,  6200,  6800, 11300],
       device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 3-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9489, 0.9351, 0.9422, 0.9315, 0.9456, 0.9560, 0.9260, 0.9489, 0.9473,
        0.9168, 0.9670, 0.9475, 0.9558, 0.9374, 0.9441, 0.9402, 0.9657, 0.9607,
        0.9567, 0.9196], device='cuda:0')
ddim.py start_timesteps = tensor([5300, 6600, 5900, 6900, 5600, 4600, 7400, 5300, 5500, 8200, 3500, 5400,
        4600, 6400, 5800, 6100, 3700, 4200, 4600, 7900], device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 4-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9671, 0.9580, 0.9627, 0.9556, 0.9650, 0.9718, 0.9520, 0.9672, 0.9661,
        0.9458, 0.9789, 0.9662, 0.9716, 0.9596, 0.9640, 0.9614, 0.9781, 0.9748,
        0.9723, 0.9477], device='cuda:0')
ddim.py start_timesteps = tensor([3500, 4400, 4000, 4700, 3700, 3000, 5000, 3500, 3600, 5600, 2300, 3600,
        3100, 4300, 3800, 4100, 2400, 2700, 3000, 5400], device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 5-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9790, 0.9731, 0.9762, 0.9715, 0.9776, 0.9820, 0.9692, 0.9790, 0.9783,
        0.9651, 0.9866, 0.9784, 0.9819, 0.9741, 0.9770, 0.9753, 0.9861, 0.9840,
        0.9823, 0.9664], device='cuda:0')
ddim.py start_timesteps = tensor([2300, 2900, 2600, 3100, 2400, 2000, 3300, 2300, 2400, 3700, 1500, 2400,
        2000, 2800, 2500, 2700, 1500, 1800, 1900, 3600], device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 6-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9866, 0.9829, 0.9848, 0.9819, 0.9858, 0.9886, 0.9803, 0.9867, 0.9862,
        0.9777, 0.9915, 0.9863, 0.9885, 0.9835, 0.9853, 0.9843, 0.9912, 0.9898,
        0.9888, 0.9785], device='cuda:0')
ddim.py start_timesteps = tensor([1500, 1900, 1700, 2000, 1600, 1300, 2200, 1500, 1500, 2400,  900, 1500,
        1300, 1800, 1600, 1700, 1000, 1100, 1200, 2300], device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 7-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9915, 0.9891, 0.9904, 0.9885, 0.9910, 0.9928, 0.9875, 0.9915, 0.9913,
        0.9858, 0.9946, 0.9913, 0.9927, 0.9895, 0.9907, 0.9900, 0.9944, 0.9936,
        0.9929, 0.9863], device='cuda:0')
ddim.py start_timesteps = tensor([ 900, 1200, 1100, 1300, 1000,  800, 1400,  900, 1000, 1600,  600, 1000,
         800, 1200, 1000, 1100,  600,  700,  800, 1500], device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 8-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9946, 0.9931, 0.9939, 0.9927, 0.9943, 0.9954, 0.9921, 0.9946, 0.9945,
        0.9910, 0.9966, 0.9945, 0.9954, 0.9934, 0.9941, 0.9937, 0.9965, 0.9959,
        0.9955, 0.9913], device='cuda:0')
ddim.py start_timesteps = tensor([ 600,  700,  700,  800,  600,  500,  900,  600,  600, 1000,  300,  600,
         500,  700,  600,  700,  400,  400,  500,  900], device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 9-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9966, 0.9956, 0.9961, 0.9954, 0.9964, 0.9971, 0.9950, 0.9966, 0.9965,
        0.9943, 0.9979, 0.9965, 0.9971, 0.9958, 0.9963, 0.9960, 0.9978, 0.9974,
        0.9972, 0.9945], device='cuda:0')
ddim.py start_timesteps = tensor([300, 500, 400, 500, 400, 300, 500, 300, 400, 600, 200, 400, 300, 400,
        400, 400, 200, 300, 300, 600], device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 10-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9979, 0.9972, 0.9976, 0.9971, 0.9977, 0.9982, 0.9968, 0.9979, 0.9978,
        0.9964, 0.9986, 0.9978, 0.9982, 0.9973, 0.9976, 0.9975, 0.9986, 0.9984,
        0.9982, 0.9965], device='cuda:0')
ddim.py start_timesteps = tensor([200, 300, 200, 300, 200, 200, 300, 200, 200, 400, 100, 200, 200, 300,
        200, 200, 100, 100, 200, 400], device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 11-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9986, 0.9983, 0.9985, 0.9982, 0.9986, 0.9988, 0.9980, 0.9987, 0.9986,
        0.9977, 0.9991, 0.9986, 0.9988, 0.9983, 0.9985, 0.9984, 0.9991, 0.9990,
        0.9989, 0.9978], device='cuda:0')
ddim.py start_timesteps = tensor([100, 200, 100, 200, 100, 100, 200, 100, 100, 200, 100, 100, 100, 100,
        100, 100, 100, 100, 100, 200], device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 12-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9991, 0.9989, 0.9990, 0.9988, 0.9991, 0.9993, 0.9987, 0.9991, 0.9991,
        0.9986, 0.9995, 0.9991, 0.9993, 0.9989, 0.9991, 0.9990, 0.9994, 0.9994,
        0.9993, 0.9986], device='cuda:0')
ddim.py start_timesteps = tensor([100, 100, 100, 100, 100,   0, 100, 100, 100, 100,   0, 100,   0, 100,
        100, 100,   0,   0,   0, 100], device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 13-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9995, 0.9993, 0.9994, 0.9993, 0.9994, 0.9995, 0.9992, 0.9995, 0.9994,
        0.9991, 0.9997, 0.9994, 0.9995, 0.9993, 0.9994, 0.9994, 0.9996, 0.9996,
        0.9995, 0.9991], device='cuda:0')
ddim.py start_timesteps = tensor([  0,   0,   0,   0,   0,   0,   0,   0,   0, 100,   0,   0,   0,   0,
          0,   0,   0,   0,   0, 100], device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 14-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9997, 0.9996, 0.9996, 0.9995, 0.9996, 0.9997, 0.9995, 0.9997, 0.9996,
        0.9994, 0.9998, 0.9997, 0.9997, 0.9996, 0.9996, 0.9996, 0.9998, 0.9997,
        0.9997, 0.9994], device='cuda:0')
ddim.py start_timesteps = tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 15-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9998, 0.9997, 0.9998, 0.9997, 0.9998, 0.9998, 0.9997, 0.9998, 0.9998,
        0.9996, 0.9999, 0.9998, 0.9998, 0.9997, 0.9998, 0.9997, 0.9999, 0.9998,
        0.9998, 0.9997], device='cuda:0')
ddim.py start_timesteps = tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 16-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9999, 0.9998, 0.9998, 0.9998, 0.9999, 0.9999, 0.9998, 0.9999, 0.9999,
        0.9998, 0.9999, 0.9999, 0.9999, 0.9998, 0.9999, 0.9998, 0.9999, 0.9999,
        0.9999, 0.9998], device='cuda:0')
ddim.py start_timesteps = tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 17-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9999, 0.9999, 0.9999, 0.9999, 0.9999, 0.9999, 0.9999, 0.9999, 0.9999,
        0.9999, 0.9999, 0.9999, 0.9999, 0.9999, 0.9999, 0.9999, 0.9999, 0.9999,
        0.9999, 0.9999], device='cuda:0')
ddim.py start_timesteps = tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 18-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9999, 0.9999, 0.9999, 0.9999, 0.9999, 1.0000, 0.9999, 0.9999, 0.9999,
        0.9999, 1.0000, 0.9999, 1.0000, 0.9999, 0.9999, 0.9999, 1.0000, 1.0000,
        1.0000, 0.9999], device='cuda:0')
ddim.py start_timesteps = tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
--------SNR = 19-----------
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 0.9999, 1.0000, 1.0000,
        0.9999, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
        1.0000, 0.9999], device='cuda:0')
ddim.py start_timesteps = tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       device='cuda:0')
d = torch.Size([20, 4, 32, 32])
recoverd_img = torch.Size([20, 3, 256, 256])
20 images are saved in outputs/txt2img-samples/
