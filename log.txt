Loading model from models/ldm/text2img-large/model.ckpt
autoencoder.py
LatentDiffusion: Running in eps-prediction mode
DiffusionWrapper has 872.30 M params.
ldm.modules/diffusionmodules/util.py ; make_schedule = linear
ldm/modules/diffusionmodules/model.py, Enocoder; in_channels = 3, ch_mult = [1, 2, 4, 4]
ldm/modules/diffusionmodules/model.py, Resnet in_channels != out_channels
ldm/modules/diffusionmodules/model.py, Resnet in_channels != out_channels
making attention of type 'vanilla' with 512 in_channels
ldm/models/autoencoder.py, AutoencoderKL init, created
Working with z of shape (1, 4, 32, 32) = 4096 dimensions.
making attention of type 'vanilla' with 512 in_channels
ldm/modules/diffusionmodules/model.py, Resnet in_channels != out_channels
ldm/modules/diffusionmodules/model.py, Resnet in_channels != out_channels
remove_png complete
img shape = torch.Size([10, 3, 256, 256])
10 images are saved in ./sentimg/
Encoder, forward@@@@@@@@@@@@@@@
autoencoder.py, h = torch.Size([10, 8, 32, 32])
autoencoder.py , moments = torch.Size([10, 8, 32, 32])
encode start = 
z = torch.Size([10, 4, 32, 32]), z_max = 6.474400520324707, z_min = -6.702722549438477
images are saved in outputs/z.png
--------SNR = -10-----------
noise_variace = tensor([4.8889, 5.0148, 4.4990, 5.0640, 4.7570, 4.9433, 4.9255, 4.4127, 4.7170,
        5.0645], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.1698, 0.1663, 0.1818, 0.1649, 0.1737, 0.1683, 0.1688, 0.1847, 0.1749,
        0.1649], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([591, 595, 580, 596, 587, 593, 592, 577, 586, 596], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = -9-----------
noise_variace = tensor([3.8834, 3.9834, 3.5737, 4.0225, 3.7786, 3.9266, 3.9125, 3.5052, 3.7469,
        4.0229], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.2048, 0.2007, 0.2186, 0.1991, 0.2093, 0.2030, 0.2036, 0.2220, 0.2107,
        0.1991], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([559, 562, 546, 564, 555, 560, 560, 544, 553, 564], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = -8-----------
noise_variace = tensor([3.0847, 3.1641, 2.8387, 3.1952, 3.0014, 3.1190, 3.1078, 2.7842, 2.9762,
        3.1955], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.2448, 0.2401, 0.2605, 0.2384, 0.2499, 0.2428, 0.2434, 0.2643, 0.2515,
        0.2383], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([525, 529, 513, 530, 521, 526, 526, 510, 520, 530], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = -7-----------
noise_variace = tensor([2.4503, 2.5133, 2.2549, 2.5380, 2.3841, 2.4775, 2.4686, 2.2116, 2.3641,
        2.5383], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.2898, 0.2846, 0.3072, 0.2826, 0.2955, 0.2876, 0.2883, 0.3114, 0.2973,
        0.2826], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([491, 494, 478, 496, 486, 492, 492, 475, 485, 496], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = -6-----------
noise_variace = tensor([1.9463, 1.9964, 1.7911, 2.0160, 1.8938, 1.9680, 1.9609, 1.7567, 1.8779,
        2.0162], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.3394, 0.3337, 0.3583, 0.3316, 0.3456, 0.3369, 0.3377, 0.3627, 0.3475,
        0.3315], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([456, 460, 443, 461, 451, 457, 457, 440, 450, 461], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = -5-----------
noise_variace = tensor([1.5460, 1.5858, 1.4227, 1.6014, 1.5043, 1.5632, 1.5576, 1.3954, 1.4916,
        1.6016], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.3928, 0.3867, 0.4128, 0.3844, 0.3993, 0.3901, 0.3910, 0.4175, 0.4013,
        0.3844], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([421, 424, 408, 426, 416, 422, 422, 405, 415, 426], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = -4-----------
noise_variace = tensor([1.2280, 1.2596, 1.1301, 1.2720, 1.1949, 1.2417, 1.2372, 1.1084, 1.1849,
        1.2722], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.4488, 0.4425, 0.4695, 0.4401, 0.4556, 0.4461, 0.4470, 0.4743, 0.4577,
        0.4401], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([385, 389, 373, 391, 381, 387, 387, 370, 380, 391], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = -3-----------
noise_variace = tensor([0.9755, 1.0006, 0.8977, 1.0104, 0.9491, 0.9863, 0.9828, 0.8805, 0.9412,
        1.0105], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.5062, 0.4999, 0.5270, 0.4974, 0.5130, 0.5034, 0.5043, 0.5318, 0.5152,
        0.4974], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([351, 354, 338, 356, 347, 352, 352, 335, 345, 356], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = -2-----------
noise_variace = tensor([0.7748, 0.7948, 0.7131, 0.8026, 0.7539, 0.7835, 0.7806, 0.6994, 0.7476,
        0.8027], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.5634, 0.5572, 0.5838, 0.5548, 0.5701, 0.5607, 0.5616, 0.5885, 0.5722,
        0.5547], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([317, 320, 305, 322, 313, 318, 318, 302, 311, 322], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = -1-----------
noise_variace = tensor([0.6155, 0.6313, 0.5664, 0.6375, 0.5989, 0.6223, 0.6201, 0.5555, 0.5938,
        0.6376], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.6190, 0.6130, 0.6384, 0.6107, 0.6254, 0.6164, 0.6173, 0.6429, 0.6274,
        0.6107], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([284, 287, 272, 288, 280, 285, 285, 269, 278, 289], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 0-----------
noise_variace = tensor([0.4889, 0.5015, 0.4499, 0.5064, 0.4757, 0.4943, 0.4926, 0.4413, 0.4717,
        0.5065], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.6716, 0.6660, 0.6897, 0.6638, 0.6776, 0.6692, 0.6700, 0.6938, 0.6795,
        0.6638], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([252, 255, 241, 257, 248, 253, 253, 238, 247, 257], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 1-----------
noise_variace = tensor([0.3883, 0.3983, 0.3574, 0.4022, 0.3779, 0.3927, 0.3912, 0.3505, 0.3747,
        0.4023], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.7203, 0.7151, 0.7367, 0.7131, 0.7258, 0.7180, 0.7188, 0.7405, 0.7274,
        0.7131], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([222, 225, 211, 226, 218, 223, 223, 209, 217, 226], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 2-----------
noise_variace = tensor([0.3085, 0.3164, 0.2839, 0.3195, 0.3001, 0.3119, 0.3108, 0.2784, 0.2976,
        0.3196], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.7643, 0.7596, 0.7789, 0.7579, 0.7691, 0.7623, 0.7629, 0.7822, 0.7706,
        0.7578], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([194, 197, 184, 198, 190, 195, 195, 182, 189, 198], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 3-----------
noise_variace = tensor([0.2450, 0.2513, 0.2255, 0.2538, 0.2384, 0.2478, 0.2469, 0.2212, 0.2364,
        0.2538], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.8032, 0.7991, 0.8160, 0.7976, 0.8075, 0.8014, 0.8020, 0.8189, 0.8088,
        0.7976], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([168, 170, 159, 171, 165, 169, 168, 157, 164, 171], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 4-----------
noise_variace = tensor([0.1946, 0.1996, 0.1791, 0.2016, 0.1894, 0.1968, 0.1961, 0.1757, 0.1878,
        0.2016], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.8371, 0.8336, 0.8481, 0.8322, 0.8408, 0.8356, 0.8361, 0.8506, 0.8419,
        0.8322], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([144, 146, 136, 147, 141, 145, 145, 134, 140, 147], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 5-----------
noise_variace = tensor([0.1546, 0.1586, 0.1423, 0.1601, 0.1504, 0.1563, 0.1558, 0.1395, 0.1492,
        0.1602], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.8661, 0.8631, 0.8754, 0.8620, 0.8692, 0.8648, 0.8652, 0.8775, 0.8702,
        0.8620], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([122, 125, 115, 126, 120, 123, 123, 114, 119, 126], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 6-----------
noise_variace = tensor([0.1228, 0.1260, 0.1130, 0.1272, 0.1195, 0.1242, 0.1237, 0.1108, 0.1185,
        0.1272], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.8906, 0.8881, 0.8985, 0.8872, 0.8933, 0.8895, 0.8899, 0.9002, 0.8941,
        0.8871], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([103, 105,  97, 106, 101, 104, 104,  96, 101, 106], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 7-----------
noise_variace = tensor([0.0975, 0.1001, 0.0898, 0.1010, 0.0949, 0.0986, 0.0983, 0.0880, 0.0941,
        0.1011], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9111, 0.9090, 0.9176, 0.9082, 0.9133, 0.9102, 0.9105, 0.9191, 0.9140,
        0.9082], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([87, 88, 81, 89, 85, 87, 87, 80, 84, 89], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 8-----------
noise_variace = tensor([0.0775, 0.0795, 0.0713, 0.0803, 0.0754, 0.0783, 0.0781, 0.0699, 0.0748,
        0.0803], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9281, 0.9264, 0.9334, 0.9257, 0.9299, 0.9273, 0.9276, 0.9346, 0.9304,
        0.9257], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([72, 74, 67, 74, 70, 73, 72, 66, 70, 74], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 9-----------
noise_variace = tensor([0.0615, 0.0631, 0.0566, 0.0638, 0.0599, 0.0622, 0.0620, 0.0556, 0.0594,
        0.0638], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9420, 0.9406, 0.9464, 0.9401, 0.9435, 0.9414, 0.9416, 0.9474, 0.9439,
        0.9401], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([59, 61, 55, 61, 58, 60, 60, 54, 58, 61], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 10-----------
noise_variace = tensor([0.0489, 0.0501, 0.0450, 0.0506, 0.0476, 0.0494, 0.0493, 0.0441, 0.0472,
        0.0506], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9534, 0.9522, 0.9569, 0.9518, 0.9546, 0.9529, 0.9531, 0.9577, 0.9550,
        0.9518], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([49, 50, 45, 50, 48, 49, 49, 45, 47, 50], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 11-----------
noise_variace = tensor([0.0388, 0.0398, 0.0357, 0.0402, 0.0378, 0.0393, 0.0391, 0.0351, 0.0375,
        0.0402], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9626, 0.9617, 0.9655, 0.9613, 0.9636, 0.9622, 0.9623, 0.9661, 0.9639,
        0.9613], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([40, 41, 37, 41, 39, 40, 40, 36, 39, 41], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 12-----------
noise_variace = tensor([0.0308, 0.0316, 0.0284, 0.0320, 0.0300, 0.0312, 0.0311, 0.0278, 0.0298,
        0.0320], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9701, 0.9693, 0.9724, 0.9690, 0.9709, 0.9698, 0.9699, 0.9729, 0.9711,
        0.9690], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([32, 33, 30, 33, 31, 33, 32, 29, 31, 33], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 13-----------
noise_variace = tensor([0.0245, 0.0251, 0.0225, 0.0254, 0.0238, 0.0248, 0.0247, 0.0221, 0.0236,
        0.0254], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9761, 0.9755, 0.9779, 0.9752, 0.9767, 0.9758, 0.9759, 0.9784, 0.9769,
        0.9752], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([26, 27, 24, 27, 25, 26, 26, 24, 25, 27], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 14-----------
noise_variace = tensor([0.0195, 0.0200, 0.0179, 0.0202, 0.0189, 0.0197, 0.0196, 0.0176, 0.0188,
        0.0202], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9809, 0.9804, 0.9824, 0.9802, 0.9814, 0.9807, 0.9808, 0.9827, 0.9816,
        0.9802], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([21, 21, 19, 22, 20, 21, 21, 19, 20, 22], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 15-----------
noise_variace = tensor([0.0155, 0.0159, 0.0142, 0.0160, 0.0150, 0.0156, 0.0156, 0.0140, 0.0149,
        0.0160], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9848, 0.9844, 0.9860, 0.9842, 0.9852, 0.9846, 0.9847, 0.9862, 0.9853,
        0.9842], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([17, 17, 15, 17, 16, 17, 17, 15, 16, 17], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 16-----------
noise_variace = tensor([0.0123, 0.0126, 0.0113, 0.0127, 0.0119, 0.0124, 0.0124, 0.0111, 0.0118,
        0.0127], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9879, 0.9876, 0.9888, 0.9874, 0.9882, 0.9877, 0.9878, 0.9890, 0.9883,
        0.9874], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([13, 14, 12, 14, 13, 14, 13, 12, 13, 14], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 17-----------
noise_variace = tensor([0.0098, 0.0100, 0.0090, 0.0101, 0.0095, 0.0099, 0.0098, 0.0088, 0.0094,
        0.0101], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9903, 0.9901, 0.9911, 0.9900, 0.9906, 0.9902, 0.9903, 0.9913, 0.9907,
        0.9900], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([11, 11, 10, 11, 10, 11, 11, 10, 10, 11], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 18-----------
noise_variace = tensor([0.0077, 0.0079, 0.0071, 0.0080, 0.0075, 0.0078, 0.0078, 0.0070, 0.0075,
        0.0080], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9923, 0.9921, 0.9929, 0.9920, 0.9925, 0.9922, 0.9923, 0.9931, 0.9926,
        0.9920], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([8, 9, 8, 9, 8, 8, 8, 8, 8, 9], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
--------SNR = 19-----------
noise_variace = tensor([0.0062, 0.0063, 0.0057, 0.0064, 0.0060, 0.0062, 0.0062, 0.0056, 0.0059,
        0.0064], device='cuda:0')
####cond finisihed #####
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps ddim_discr_method = uniform
ldm/modules/diffusionmodules/util.py, make_ddim_timsteps, Selected timesteps for ddim sampler: (200,)
ldm/modules/diffusionmodules/util.py, make_ddim_sampling_parameters, Selected alphas for ddim sampler: a_t: torch.Size([200]); a_(t-1): (200,)
For the chosen value of eta, which is 0.0, this results in the following sigma_t schedule for ddim sampler tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.], dtype=torch.float64)
ddim.py alphas_cumprod = torch.Size([1000])
ddim.py, alpha_bar_u = tensor([0.9939, 0.9937, 0.9944, 0.9937, 0.9940, 0.9938, 0.9938, 0.9945, 0.9941,
        0.9937], device='cuda:0')
ddim.py start_timesteps after clamp S = 200 : tensor([7, 7, 6, 7, 6, 7, 7, 6, 6, 7], device='cuda:0')
d = torch.Size([10, 4, 32, 32])
recoverd_img = torch.Size([10, 3, 256, 256])
10 images are saved in outputs/predict_noise/k=0.0/
